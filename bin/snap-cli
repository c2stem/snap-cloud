#! /usr/bin/env node

// fn-ality to support
//  - list users
//  - add user
//  - delete user

var program = require('commander'),
    version = require('../package.json'),
    MongoClient = require('mongodb').MongoClient,
    users = require('../src/users'),
    mailer = require('../src/mailer'),
    sha = require('sha.js'),
    mongoUri;

if (process.argv.length === 2) {
    process.argv.push('--help');
}

mongoUri = process.env.MONGO_URI || 'mongodb://127.0.0.1:27017/snapcloud';
program.version(version);

mailer.init();
program
    .command('list-users')
    .option('-l,--long')
    .action(function(opts) {
        return MongoClient.connect(mongoUri)
            .then(db => {
                users.init(db);

                var stream = users.all();
                stream.on('error', err => {
                    console.error('Error:', err);
                    db.close();
                });

                stream.on('data', doc => {
                    if (opts.long) {
                        console.log([
                            doc._id,
                            doc.email,
                            doc.updated
                        ].join('\t\t'));
                    } else {
                        console.log(doc._id);
                    }
                });

                stream.on('end', () => db.close());
            })
            .catch(err => {
                console.error('Could not connect to database:', err);
            });
    });

program
    .command('delete-user <username>')
    .action(function(username) {
        return MongoClient.connect(mongoUri)
            .then(db => {
                users.init(db);

                return users.remove(username)
                    .then(deleted => {
                        if (deleted) {
                            console.log('user deleted!');
                        } else {
                            console.log('user not found');
                        }
                        return db.close();
                    });
            })
            .catch(err => {
                console.error('Could not connect to database:', err);
            });
    });

program
    .command('add-user <username> <email>')
    .description('add new user with the given username and password')
    .option('-s, --silent', 'Do not email the user with tmp password')
    .option('-d, --data [KEY_1=VAL_1,KEY_2=VAL_2,...KEY_N=VAL_N]', 'Add additional data for the user')
    .action(function(username, email, program) {
        var data = null;

        if (program.data) {
            data = program.data.split(',').map(function(pair) {
                return pair.split('=');
            });
        }
        console.log('connecting to', mongoUri);
        return MongoClient.connect(mongoUri)
            .then(db => {
                users.init(db);

                console.log('creating new user', username);
                return users.new(username, email, program.silent, data)
                    .then(() => db.close());
            })
            .then(() => console.log('user created!'))
            .catch(err => {
                console.error('Could not connect to database:', err);
            });
    });

program
    .command('set-email <username> <email>')
    .action(function(username, email) {
        return MongoClient.connect(mongoUri)
            .then(db => {
                users.init(db);

                return users.setEmail(username, email)
                    .then(() => db.close());
            })
            .then(() => console.log('user updated!'))
            .catch(err => console.error('Could not set email:', err));
    });

program
    .command('set-password <username> [password]')
    .action(function(username, password) {
        return MongoClient.connect(mongoUri)
            .then(db => {
		var hash = null;
                users.init(db);

		if (password) {
                    hash = sha('sha512').update(password).digest('hex');
		}

                return users.setPassword(username, hash)
                    .then(() => db.close());
            })
            .then(() => console.log('password updated!'))
            .catch(err => {
                console.error('Could not connect to database:', err);
            });
    });

program
    .command('list-projects')
    .description('list all user projects')
    .option('-l,--long')
    .action(function(opts) {
        return MongoClient.connect(mongoUri)
            .then(db => {
                var stream = db.collection('projects').find({}).stream();

                stream.on('error', err => {
                    console.error(err);
                    db.close();
                });

                stream.on('data', doc => {
                    if (opts.long) {
                        console.log([
                            doc.name,
                            doc.user,
                            doc.updated,
                            doc.public ? 'public' : 'private'
                        ].join('\t\t'));
                    } else {
                        console.log(doc.name);
                    }
                });

                stream.on('end', () => db.close());
            })
            .catch(err => console.error(err));
    });

program
    .command('delete-project <username> <project>')
    .action(function(username, project) {
        return MongoClient.connect(mongoUri)
            .then(db => {
                return db.collection('projects').remove({
                    user: username,
                    name: project
                }).then(res => {
                    if (res.result.n) {
                        console.log('project deleted');
                    } else {
                        console.log('project not found');
                    }
                    return db.close();
                });
            })
            .catch(err => console.error(err));
    });

program.parse(process.argv);
